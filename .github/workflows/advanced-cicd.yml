name: 🚀 Advanced Multi-Image CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build all images'
        required: false
        default: 'false'
        type: boolean
      target_images:
        description: 'Target images (comma-separated: app,postgres,redis)'
        required: false
        default: 'all'

env:
  REGISTRY: registry.jclee.me
  REGISTRY_USER: admin
  PROJECT_NAME: blacklist

jobs:
  # 변경사항 분석 및 버전 계산
  analyze-changes:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_app: ${{ steps.changes.outputs.app }}
      build_postgres: ${{ steps.changes.outputs.postgres }}
      build_redis: ${{ steps.changes.outputs.redis }}
      should_build: ${{ steps.decision.outputs.should_build }}
      
    steps:
    - name: 📥 Checkout with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 변경사항 감지
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          app:
            - 'src/**'
            - 'main.py'
            - 'Dockerfile'
            - 'requirements.txt'
            - '.github/workflows/advanced-cicd.yml'
          postgres:
            - 'postgres.Dockerfile'
            - 'src/core/database/**'
            - 'instance/**'
          redis:
            - 'redis.Dockerfile'
            - 'config/redis/**'
            
    - name: 📈 자동 버전 계산
      id: version
      run: |
        # 마지막 태그 가져오기
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Last tag: $LAST_TAG"
        
        # 버전 번호 파싱
        VERSION_WITHOUT_V=${LAST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION_WITHOUT_V"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        # 커밋 메시지 기반 버전 증가 결정
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        
        if echo "$COMMIT_MESSAGE" | grep -qE "^(feat|FEAT|feature)"; then
          MINOR=$((MINOR + 1))
          PATCH=0
          BUMP_TYPE="minor"
        elif echo "$COMMIT_MESSAGE" | grep -qE "^(fix|FIX|bugfix|hotfix)"; then
          PATCH=$((PATCH + 1))
          BUMP_TYPE="patch"
        elif echo "$COMMIT_MESSAGE" | grep -qE "^(BREAKING|breaking)"; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
          BUMP_TYPE="major"
        else
          PATCH=$((PATCH + 1))
          BUMP_TYPE="patch"
        fi
        
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        SHORT_SHA=$(git rev-parse --short HEAD)
        BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        
        echo "🏷️ New version: $NEW_VERSION ($BUMP_TYPE bump)"
        echo "📋 Build: $BUILD_NUMBER"
        echo "📝 SHA: $SHORT_SHA"
        
    - name: 🎯 빌드 결정
      id: decision
      run: |
        FORCE_BUILD="${{ github.event.inputs.force_build }}"
        TARGET_IMAGES="${{ github.event.inputs.target_images }}"
        
        # PR인 경우 빌드하지 않음
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "should_build=false" >> $GITHUB_OUTPUT
          echo "📝 PR 이벤트 - 빌드 스킵"
          exit 0
        fi
        
        # 강제 빌드인 경우
        if [[ "$FORCE_BUILD" == "true" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "🔨 강제 빌드 실행"
          exit 0
        fi
        
        # 변경사항이 있는 경우만 빌드
        if [[ "${{ steps.changes.outputs.app }}" == "true" || \
              "${{ steps.changes.outputs.postgres }}" == "true" || \
              "${{ steps.changes.outputs.redis }}" == "true" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "✅ 변경사항 감지 - 빌드 실행"
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
          echo "📭 변경사항 없음 - 빌드 스킵"
        fi

  # 멀티 이미지 병렬 빌드
  build-images:
    needs: analyze-changes
    if: needs.analyze-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: app
            dockerfile: Dockerfile
            context: .
            build_condition: ${{ needs.analyze-changes.outputs.build_app }}
          - name: postgres  
            dockerfile: postgres.Dockerfile
            context: .
            build_condition: ${{ needs.analyze-changes.outputs.build_postgres }}
          - name: redis
            dockerfile: redis.Dockerfile
            context: .
            build_condition: ${{ needs.analyze-changes.outputs.build_redis }}
            
    steps:
    - name: ⏭️ 빌드 조건 확인
      id: should_build_image
      run: |
        FORCE_BUILD="${{ github.event.inputs.force_build }}"
        TARGET_IMAGES="${{ github.event.inputs.target_images }}"
        IMAGE_NAME="${{ matrix.name }}"
        BUILD_CONDITION="${{ matrix.build_condition }}"
        
        # 강제 빌드 또는 all 타겟인 경우
        if [[ "$FORCE_BUILD" == "true" ]] || [[ "$TARGET_IMAGES" == "all" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "🔨 $IMAGE_NAME 이미지 빌드 예정 (강제/전체)"
          exit 0
        fi
        
        # 특정 타겟 지정된 경우
        if [[ "$TARGET_IMAGES" == *"$IMAGE_NAME"* ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "🎯 $IMAGE_NAME 이미지 빌드 예정 (타겟 지정)"
          exit 0
        fi
        
        # 변경사항 기반 빌드
        if [[ "$BUILD_CONDITION" == "true" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "📝 $IMAGE_NAME 이미지 빌드 예정 (변경사항)"
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
          echo "⏭️ $IMAGE_NAME 이미지 빌드 스킵"
        fi
        
    - name: 📥 Checkout 코드
      if: steps.should_build_image.outputs.should_build == 'true'
      uses: actions/checkout@v4
      
    - name: 🏗️ Docker Buildx 설정
      if: steps.should_build_image.outputs.should_build == 'true'
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 프라이빗 레지스트리 로그인
      if: steps.should_build_image.outputs.should_build == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: 📋 이미지 메타데이터 생성
      if: steps.should_build_image.outputs.should_build == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-${{ matrix.name }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.analyze-changes.outputs.version }}
          type=raw,value=${{ needs.analyze-changes.outputs.version }}-{{sha}}
          type=raw,value=build-${{ needs.analyze-changes.outputs.build_number }}
        labels: |
          org.opencontainers.image.title=${{ env.PROJECT_NAME }}-${{ matrix.name }}
          org.opencontainers.image.description=Blacklist Management System - ${{ matrix.name }}
          org.opencontainers.image.version=${{ needs.analyze-changes.outputs.version }}
          org.opencontainers.image.vendor=jclee
          
    - name: 🐳 Docker 이미지 빌드 및 푸시
      if: steps.should_build_image.outputs.should_build == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.name }}
        cache-to: type=gha,mode=max,scope=${{ matrix.name }}
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ needs.analyze-changes.outputs.version }}
          BUILD_NUMBER=${{ needs.analyze-changes.outputs.build_number }}
          
    - name: ✅ 빌드 결과 출력
      if: steps.should_build_image.outputs.should_build == 'true'
      run: |
        echo "🎉 ${{ matrix.name }} 이미지 빌드 완료!"
        echo "📦 이미지: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-${{ matrix.name }}"
        echo "🏷️ 버전: ${{ needs.analyze-changes.outputs.version }}"
        echo "📝 태그들:"
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'

  # 이미지 보안 스캔
  security-scan:
    needs: [analyze-changes, build-images]
    if: needs.analyze-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [app, postgres, redis]
        
    steps:
    - name: 🔐 레지스트리 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: 🛡️ 보안 스캔
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-${{ matrix.image }}:${{ needs.analyze-changes.outputs.version }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.image }}.sarif'
        
    - name: 📊 보안 스캔 결과 업로드
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.image }}.sarif'

  # 통합 테스트
  integration-test:
    needs: [analyze-changes, build-images]
    if: needs.analyze-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout 코드
      uses: actions/checkout@v4
      
    - name: 🔐 레지스트리 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: 🏗️ 테스트 환경 구성
      run: |
        # docker-compose.test.yml 생성
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          postgres:
            image: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-postgres:${{ needs.analyze-changes.outputs.version }}
            environment:
              POSTGRES_DB: blacklist_test
              POSTGRES_USER: test
              POSTGRES_PASSWORD: test123
            ports:
              - "5432:5432"
              
          redis:
            image: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-redis:${{ needs.analyze-changes.outputs.version }}
            ports:
              - "6379:6379"
              
          app:
            image: ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-app:${{ needs.analyze-changes.outputs.version }}
            depends_on:
              - postgres
              - redis
            environment:
              POSTGRES_HOST: postgres
              POSTGRES_USER: test
              POSTGRES_PASSWORD: test123
              POSTGRES_DB: blacklist_test
              REDIS_HOST: redis
              FLASK_ENV: testing
            ports:
              - "2542:2542"
        EOF
        
    - name: 🧪 통합 테스트 실행
      run: |
        echo "🚀 통합 테스트 시작..."
        
        # 컨테이너 시작
        docker-compose -f docker-compose.test.yml up -d
        
        # 서비스 시작 대기
        sleep 60
        
        # 헬스체크
        for i in {1..10}; do
          if curl -f http://localhost:2542/health; then
            echo "✅ 애플리케이션 헬스체크 성공!"
            break
          fi
          echo "⏳ 헬스체크 재시도 ($i/10)..."
          sleep 10
        done
        
        # 로그 확인
        echo "📋 애플리케이션 로그:"
        docker-compose -f docker-compose.test.yml logs app | tail -20
        
        # 정리
        docker-compose -f docker-compose.test.yml down -v
        
        echo "🎉 통합 테스트 완료!"

  # 버전 태그 생성 및 릴리즈
  release:
    needs: [analyze-changes, build-images, security-scan, integration-test]
    if: needs.analyze-changes.outputs.should_build == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout 코드
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Git 태그 생성
      run: |
        VERSION="${{ needs.analyze-changes.outputs.version }}"
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # 태그 생성
        git tag -a "$VERSION" -m "Release $VERSION
        
        🚀 자동 릴리즈 생성
        📅 빌드 시간: $(date)
        📝 커밋: ${{ github.sha }}
        🏷️ 버전: $VERSION
        
        빌드된 이미지:
        - ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-app:$VERSION
        - ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-postgres:$VERSION  
        - ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-redis:$VERSION"
        
        git push origin "$VERSION"
        
    - name: 📰 GitHub Release 생성
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.analyze-changes.outputs.version }}
        release_name: Release ${{ needs.analyze-changes.outputs.version }}
        body: |
          ## 🚀 Blacklist Management System ${{ needs.analyze-changes.outputs.version }}
          
          ### 📦 Docker Images
          - `${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-app:${{ needs.analyze-changes.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-postgres:${{ needs.analyze-changes.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-redis:${{ needs.analyze-changes.outputs.version }}`
          
          ### 🔄 업데이트 방법
          ```bash
          # 이미지 다운로드
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-app:${{ needs.analyze-changes.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-postgres:${{ needs.analyze-changes.outputs.version }}
          docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-redis:${{ needs.analyze-changes.outputs.version }}
          
          # 또는 latest 태그 사용
          docker-compose pull && docker-compose up -d
          ```
          
          ### 📋 변경사항
          - 앱 변경: ${{ needs.analyze-changes.outputs.build_app == 'true' && '✅' || '❌' }}
          - DB 변경: ${{ needs.analyze-changes.outputs.build_postgres == 'true' && '✅' || '❌' }}  
          - Redis 변경: ${{ needs.analyze-changes.outputs.build_redis == 'true' && '✅' || '❌' }}
          
          ### 🔗 추가 정보
          - 빌드 번호: ${{ needs.analyze-changes.outputs.build_number }}
          - 커밋 SHA: ${{ github.sha }}
          - 브랜치: ${{ github.ref_name }}
        draft: false
        prerelease: false

  # 알림 및 요약
  notify:
    needs: [analyze-changes, build-images, security-scan, integration-test, release]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: 📊 파이프라인 요약
      run: |
        echo "## 🚀 CI/CD 파이프라인 실행 결과" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 기본 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **이벤트**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **커밋**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **버전**: ${{ needs.analyze-changes.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔄 변경사항 분석" >> $GITHUB_STEP_SUMMARY
        echo "- **앱**: ${{ needs.analyze-changes.outputs.build_app == 'true' && '✅ 변경됨' || '❌ 변경없음' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PostgreSQL**: ${{ needs.analyze-changes.outputs.build_postgres == 'true' && '✅ 변경됨' || '❌ 변경없음' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Redis**: ${{ needs.analyze-changes.outputs.build_redis == 'true' && '✅ 변경됨' || '❌ 변경없음' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📦 빌드 결과" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.build-images.result }}" == "success" ]]; then
          echo "- **빌드**: ✅ 성공" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **빌드**: ❌ 실패" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "- **보안 스캔**: ✅ 완료" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **보안 스캔**: ❌ 실패" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.integration-test.result }}" == "success" ]]; then
          echo "- **통합 테스트**: ✅ 통과" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **통합 테스트**: ❌ 실패" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.release.result }}" == "success" ]]; then
          echo "- **릴리즈**: ✅ 완료" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **릴리즈**: ❌ 실패" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 이미지 정보" >> $GITHUB_STEP_SUMMARY
        echo "```bash" >> $GITHUB_STEP_SUMMARY
        echo "# 이미지 다운로드 명령어" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-app:${{ needs.analyze-changes.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-postgres:${{ needs.analyze-changes.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.PROJECT_NAME }}-redis:${{ needs.analyze-changes.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY