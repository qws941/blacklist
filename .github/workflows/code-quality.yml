name: 🔍 Code Quality & Security Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # 매주 월요일 오전 2시

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout 코드
      uses: actions/checkout@v4
      
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort bandit safety
        
    - name: 🎨 코드 포맷팅 검사 (Black)
      run: |
        echo "🎨 Black 코드 포맷팅 검사..."
        black --check --diff src/ || echo "⚠️ 코드 포맷팅 개선 필요"
        
    - name: 📐 Import 정렬 검사 (isort)
      run: |
        echo "📐 Import 정렬 검사..."
        isort --check-only --diff src/ || echo "⚠️ Import 정렬 개선 필요"
        
    - name: 🔍 문법 및 스타일 검사 (Flake8)
      run: |
        echo "🔍 Flake8 문법 및 스타일 검사..."
        flake8 src/ --max-line-length=88 --extend-ignore=E203,W503 || echo "⚠️ 코드 스타일 개선 필요"
        
    - name: 🔒 보안 취약점 검사 (Bandit)
      run: |
        echo "🔒 Bandit 보안 취약점 검사..."
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ || echo "⚠️ 보안 이슈 발견 - 검토 필요"
        
    - name: 🛡️ 의존성 보안 검사 (Safety)
      run: |
        echo "🛡️ Safety 의존성 보안 검사..."
        safety check || echo "⚠️ 의존성 보안 이슈 발견 - 업데이트 필요"
        
    - name: 📊 코드 품질 리포트 업로드
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          bandit-report.json
        retention-days: 30
        
  dockerfile-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout 코드
      uses: actions/checkout@v4
      
    - name: 🐳 Dockerfile Lint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: tty
        
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout 코드
      uses: actions/checkout@v4
      
    - name: 🔍 Trivy 보안 스캔 (파일시스템)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 SARIF 결과 업로드
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout 코드
      uses: actions/checkout@v4
      
    - name: 🔍 Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        
  summary:
    needs: [code-quality, dockerfile-lint, security-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📋 품질 검사 요약
      run: |
        echo "## 🔍 코드 품질 검사 결과 요약"
        echo ""
        echo "### 📊 검사 항목별 결과:"
        echo "- 코드 품질: ${{ needs.code-quality.result }}"
        echo "- Dockerfile 린트: ${{ needs.dockerfile-lint.result }}"
        echo "- 보안 스캔: ${{ needs.security-scan.result }}"
        echo ""
        
        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.dockerfile-lint.result }}" == "success" && \
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ 모든 품질 검사 통과!"
          echo "🚀 코드가 배포 준비 상태입니다"
        else
          echo "⚠️ 일부 검사에서 이슈 발견"
          echo "🔧 개선이 필요한 항목을 확인해주세요"
        fi