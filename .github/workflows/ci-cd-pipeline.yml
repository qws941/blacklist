name: Blacklist CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME_APP: blacklist-app
  IMAGE_NAME_POSTGRES: blacklist-postgres  
  IMAGE_NAME_REDIS: blacklist-redis

jobs:
  test:
    name: 테스트 및 코드 품질 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 체크아웃 코드
      uses: actions/checkout@v4
    
    - name: Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 의존성 설치
      run: |
        pip install -r src/requirements.txt
        pip install pytest pytest-cov black flake8
    
    - name: 코드 포매팅 검사 (Black)
      run: black --check src/
    
    - name: 린트 검사 (Flake8)
      run: flake8 src/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: 테스트 실행
      run: |
        cd src
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: 테스트 결과 업로드
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: src/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: 보안 스캔
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 체크아웃 코드
      uses: actions/checkout@v4
    
    - name: Python 보안 스캔 (Bandit)
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Docker 이미지 보안 스캔 (Trivy)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'python:3.11-slim'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 보안 스캔 결과 업로드
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: 이미지 빌드 및 푸시
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        include:
          - image: blacklist-app
            dockerfile: Dockerfile.simple
            context: .
          - image: blacklist-postgres
            dockerfile: postgres.Dockerfile
            context: .
          - image: blacklist-redis
            dockerfile: redis.Dockerfile
            context: .
    
    steps:
    - name: 체크아웃 코드
      uses: actions/checkout@v4
    
    - name: Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
    
    - name: 레지스트리 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: admin
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_NUMBER=${{ github.run_number }}
          VCS_REF=${{ github.sha }}
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

  deploy-staging:
    name: 스테이징 배포
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: 체크아웃 코드
      uses: actions/checkout@v4
    
    - name: Docker 네트워크 생성
      run: |
        docker network create blacklist-network || true
    
    - name: 스테이징 환경 배포
      run: |
        docker-compose -f docker-compose.resilient.yml down || true
        docker-compose -f docker-compose.resilient.yml pull
        docker-compose -f docker-compose.resilient.yml up -d
    
    - name: 헬스체크 대기
      run: |
        echo "서비스 시작 대기 중..."
        sleep 60
        
        for i in {1..30}; do
          if curl -f http://localhost:2542/health; then
            echo "헬스체크 성공!"
            break
          fi
          echo "헬스체크 재시도 $i/30..."
          sleep 10
        done
    
    - name: 통합 테스트 실행
      run: |
        # API 엔드포인트 테스트
        curl -f http://localhost:2542/api/health || exit 1
        curl -f http://localhost:2542/api/blacklist/status || exit 1
        
        # 데이터베이스 연결 테스트
        docker exec blacklist-postgres pg_isready -U postgres -d blacklist || exit 1
        
        # Redis 연결 테스트  
        docker exec blacklist-redis redis-cli ping || exit 1
    
    - name: 스테이징 정리
      if: always()
      run: |
        docker-compose -f docker-compose.resilient.yml logs --tail=100
        docker-compose -f docker-compose.resilient.yml down

  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 체크아웃 코드
      uses: actions/checkout@v4
    
    - name: 프로덕션 서버 배포
      env:
        WATCHTOWER_TOKEN: ${{ secrets.WATCHTOWER_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        # 배포 전 백업
        docker exec blacklist-postgres pg_dump -U postgres blacklist > backup-$(date +%Y%m%d_%H%M%S).sql || true
        
        # 프로덕션 배포
        docker-compose -f docker-compose.production.yml pull
        docker-compose -f docker-compose.production.yml up -d --remove-orphans
    
    - name: 배포 후 검증
      run: |
        echo "프로덕션 배포 후 검증 시작..."
        sleep 120  # 충분한 시작 시간
        
        # 서비스 헬스체크
        for i in {1..20}; do
          if curl -f http://localhost:2542/health --max-time 15; then
            echo "프로덕션 헬스체크 성공!"
            break
          fi
          echo "프로덕션 헬스체크 재시도 $i/20..."
          sleep 15
        done
        
        # 컨테이너 상태 확인
        docker-compose -f docker-compose.production.yml ps
        
        # 로그 확인
        docker-compose -f docker-compose.production.yml logs --tail=50 blacklist-app
    
    - name: 배포 알림
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Blacklist 프로덕션 배포 ${{ job.status }}
          - 브랜치: ${{ github.ref }}
          - 커밋: ${{ github.sha }}
          - 작성자: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: 롤백 (수동 트리거)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: 체크아웃 코드
      uses: actions/checkout@v4
    
    - name: 이전 버전으로 롤백
      run: |
        echo "롤백 시작..."
        
        # 이전 이미지 태그로 롤백
        docker-compose -f docker-compose.production.yml down
        
        # 백업에서 데이터베이스 복구 (필요시)
        # docker exec blacklist-postgres psql -U postgres -d blacklist < backup-latest.sql
        
        # 이전 버전으로 재시작
        docker-compose -f docker-compose.production.yml up -d
    
    - name: 롤백 후 검증
      run: |
        sleep 60
        curl -f http://localhost:2542/health || exit 1
        echo "롤백 완료 및 검증 성공"